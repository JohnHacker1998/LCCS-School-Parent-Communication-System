@model LCCS_School_Parent_Communication_System.viewModels.AcademicYearViewModel





<script type="text/javascript">
    $(document).ready(function () {
        $('.datepicker').datepicker({
            minDate: new Date(),


        });
    });
</script>


    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-red">
                <h4 class="modal-title text-white" id="title">Register Academic Year</h4>
                <button type="button" id="exit" class="close btn" data-dismiss="modal">
                    <span aria-hidden="true" class="text-white">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                @if (ViewBag.addedSuccessfully != " " && ViewBag.addedSuccessfully != null)
                {
                    <div class="alert alert-success" id="hide">
                        @ViewBag.addedSuccessfully
                    </div>
                }
                @if (ViewBag.Message != " " && ViewBag.Message != null)
                {

                    <div class="alert alert-danger" id="hide">

                        @ViewBag.Message
                    </div>
                }
                @if (ViewBag.durationMessage != " " && ViewBag.durationMessage != null)
                {
                    <div class="alert alert-danger" id="hide">

                        @ViewBag.durationMessage
                    </div>
                }
                <div class="d-flex justify-content-center ">
                    <div id="holder" class="d-none text-danger" role="status">

                    </div>
                </div>

                <form action="registerAcademicYear" id="error" autocomplete="off">
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        @Html.LabelFor(a => a.yearStart, new { @class = "form-label mt-2" })
                        <div class="container row"> @Html.EditorFor(a => a.yearStart, new { htmlAttributes = new { @readonly = true, @class = "datepicker px-1 custom" } })</div>
                        <div class="container row">@Html.ValidationMessageFor(a => a.yearStart, null, new { @class = "text-danger" })</div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.yearEnd, new { @class = "form-label mt-2" })
                        <div class="container row"> @Html.EditorFor(a => a.yearEnd, new { htmlAttributes = new { @readonly = true, @class = "datepicker px-1 custom" } })</div>
                        <div class="container row">@Html.ValidationMessageFor(a => a.yearEnd, null, new { @class = "text-danger" })</div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.quarterOneStart, new { @class = "form-label mt-2" })
                        <div class="container row"> @Html.EditorFor(a => a.quarterOneStart, new { htmlAttributes = new { @readonly = true, @class = "datepicker px-1 custom" } })</div>
                        <div class="container row">@Html.ValidationMessageFor(a => a.quarterOneStart, null, new { @class = "text-danger" })</div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.quarterOneEnd, new { @class = "form-label mt-2" })
                        <div class="container row"> @Html.EditorFor(a => a.quarterOneEnd, new { htmlAttributes = new { @readonly = true, @class = "datepicker px-1 custom" } })</div>
                        <div class="container row">@Html.ValidationMessageFor(a => a.quarterOneEnd, null, new { @class = "text-danger" })</div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.quarterTwoStart, new { @class = "form-label mt-2" })
                        <div class="container row"> @Html.EditorFor(a => a.quarterTwoStart, new { htmlAttributes = new { @readonly = true, @class = "datepicker px-1 custom" } })</div>
                        <div class="container row">@Html.ValidationMessageFor(a => a.quarterTwoStart, null, new { @class = "text-danger" })</div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.quarterTwoEnd, new { @class = "form-label mt-2" })
                        <div class="container row"> @Html.EditorFor(a => a.quarterTwoEnd, new { htmlAttributes = new { @readonly = true, @class = "datepicker px-1 custom" } })</div>
                        <div class="container row">@Html.ValidationMessageFor(a => a.quarterTwoEnd, null, new { @class = "text-danger" })</div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.quarterThreeStart, new { @class = "form-label mt-2" })
                        <div class="container row"> @Html.EditorFor(a => a.quarterThreeStart, new { htmlAttributes = new { @readonly = true, @class = "datepicker px-1 custom" } })</div>
                        <div class="container row">@Html.ValidationMessageFor(a => a.quarterThreeStart, null, new { @class = "text-danger" })</div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.quarterThreeEnd, new { @class = "form-label mt-2" })
                        <div class="container row"> @Html.EditorFor(a => a.quarterThreeEnd, new { htmlAttributes = new { @readonly = true, @class = "datepicker px-1 custom" } })</div>
                        <div class="container row">@Html.ValidationMessageFor(a => a.quarterThreeEnd, null, new { @class = "text-danger" })</div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.quarterFourStart, new { @class = "form-label mt-2" })
                        <div class="container row"> @Html.EditorFor(a => a.quarterFourStart, new { htmlAttributes = new { @readonly = true, @class = "datepicker px-1 custom" } })</div>
                        <div class="container row">@Html.ValidationMessageFor(a => a.quarterFourStart, null, new { @class = "text-danger" })</div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(a => a.quarterFourEnd, new { @class = "form-label mt-2" })
                        <div class="container row"> @Html.EditorFor(a => a.quarterFourEnd, new { htmlAttributes = new { @readonly = true, @class = "datepicker px-1 custom" } })</div>
                        <div class="container row">@Html.ValidationMessageFor(a => a.quarterFourEnd, null, new { @class = "text-danger" })</div>
                    </div>


                </form>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary" id="save" data-save="modal">Register</button>
            </div>
        </div>
    </div>

</body>
</html>
<style>
    .row, .row > * {
        padding: 0;
        margin-right: 0 !important;
        margin-left: 0 !important;
    }
    .close{
        background-color:#ea4236;
    }
</style>

<script type="text/javascript">

    $(document).ready(function () {
        var view = $('#myModal');
        const element = document.getElementById("holder");
        const hidden = document.getElementById('hide');
        const save = document.getElementById('save');
        const exit = document.getElementById('exit');
        view.on('click', '[data-save="modal"]', function (event) {

            $.validator.unobtrusive.parse("#error");
            ValidationForm();
            if (ValidationForm()) {
                if (element != null) {
                    element.classList.remove("d-none");
                    element.classList.add("spinner-border");
                    save.classList.add("disabled");
                    exit.classList.add("disabled");
                }
                if (hidden != null) {
                    hidden.classList.add("d-none");
                }
            }
        });

        function ValidationForm() {
            if (!$("#error").valid()) {
                return false;
            }
            else {
                return true;
            }
        }
    });

</script>

